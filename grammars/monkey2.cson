fileTypes: [
    "monkey2"
]
foldingStartMarker: '''
                      (?xi)
                          ^\\s*(
                              (?<!end|end\\s)(function|class|interface|method|select|while|if|lambda|property) |
                              \\#rem | for | repeat | '\\#region
                          )\\b
                    '''
foldingStopMarker: '''
                     (?xi)
                         ^\\s*(
                         # end <keyword>
                             end\\s?(function|class|method|select|while|lambda|property) |
                             \\#end|'\\#end\\s?region|end
                         )\\b
                   '''
name: "Monkey2"
patterns: [
    {
        match: ";"
        name: "punctuation.terminator.line.monkey2"
    }
    {
        include: "#mnky_comment_quote"
    }
    {
        include: "#mnky_comment_block"
    }
    {
        include: "#mnky_global_variable"
    }
    {
        include: "#mnky_local_variable"
    }
    {
        include: "#mnky_constant"
    }
    {
        include: "#mnky_attributes"
    }
    {
        include: "#mnky_commands"
    }
    {
        include: "#mnky_function"
    }
    {
        include: "#mnky_lambda"
    }
    {
        include: "#mnky_method"
    }
    {
        include: "#mnky_property"
    }
    {
        include: "#mnky_setter"
    }
    {
        captures:
            "1":
                name: "keyword.other.import.monkey2"
            "2":
                name: "string.unquoted.module.monkey2"
        match: "(?i)\\b(import|using)\\s+((?:[a-zA-Z_]\\w*\\.?)+)"
        name: "import.module.monkey2"
    }
    {
        begin: "(?i)\\b(import|using|namespace)\\s+((\"))"
        beginCaptures:
            "1":
                name: "keyword.other.import.monkey2"
            "2":
                name: "punctuation.definition.string.begin.monkey2"
            "3":
                name: "string.quoted.double.monkey2"
        contentName: "string.quoted.double.monkey2"
        end: "(\")"
        endCaptures:
            "0":
                name: "punctuation.definition.string.end.monkey2"
            "1":
                name: "string.quoted.double.monkey2"
        name: "import.file.monkey2"
        patterns: [
            {
                include: "#mnky_string_content"
            }
        ]
    }
    {
        begin: "(?i)\\b(class)\\s+([a-zA-Z_]\\w*)(?:\\s+(extends)\\s+([a-zA-Z_]\\w*))?(?:\\s+(final|abstract))?"
        beginCaptures:
            "1":
                name: "storage.type.class.monkey2"
            "2":
                name: "entity.name.type.monkey2"
            "3":
                name: "storage.modifier.extends.monkey2"
            "4":
                name: "entity.other.inherited-class.monkey2"
            "5":
                name: "storage.modifier.class.monkey2"
        end: "(?i)\\b(end(\\s?class)?)\\b"
        endCaptures:
            "1":
                name: "storage.type.class.monkey2"
        name: "type.monkey2"
        patterns: [
            {
                include: "#mnky_comment_quote"
            }
            {
                include: "#mnky_comment_block"
            }
            {
                include: "#mnky_constants"
            }
            {
                include: "#mnky_string_quoted"
            }
            {
                include: "#mnky_attributes"
            }
            {
                include: "#mnky_null"
            }
            {
                include: "#mnky_types"
            }
            {
                include: "#mnky_typename"
            }
            {
                include: "#mnky_global_variable"
            }
            {
                include: "#mnky_local_variable"
            }
            {
                include: "#mnky_constant"
            }
            {
                include: "#mnky_function"
            }
            {
                include: "#mnky_lambda"
            }
            {
                include: "#mnky_method"
            }
            {
                include: "#mnky_property"
            }
            {
                include: "#mnky_setter"
            }
            {
                include: "#mnky_field"
            }
            {
                include: "#mnky_constructor"
            }
            {
                include: "#mnky_enum"
            }
        ]
    }
    {
        match: "\\s*\\b(c(ase|ontinue)|do|e(lse(\\s?if)?|nd(class|for(each)?|function|if|method|select|while)|xit)|for(\\s?each)?|if|return|select|then|wend|while)\\b"
        name: "control.keywords.monkey2"
    }
    {
        include: "#mnky_control_keywords"
    }
    {
        begin: "(?i)\\b(while)\\b"
        beginCaptures:
            "1":
                name: "keyword.control.while.monkey2"
        end: "(?i)\\b(end(\\s?while)?|wend)\\b"
        endCaptures:
            "1":
                name: "keyword.control.while.end.monkey2"
        name: "control.while.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]
    }

    {
        begin: "(?i)\\b(if)\\b.*\\b(then)\\b\\s+\\S"
        beginCaptures:
            "1":
                name: "keyword.control.if.monkey2"
            "2":
                name: "keyword.control.then.monkey2"
        end: "$"
        name: "control.if-then.monkey2"
        patterns: [
            {
                match: "(?i)\\b(then)\\b"
                name: "keyword.control.then.monkey2"
            }
            {
                include: "$self"
            }
        ]
    }

    {
        begin: "(?i)\\b(if|else|else(\\s?if)?)\\b"
        beginCaptures:
            "1":
                name: "keyword.control.if.monkey2"
        end: "(?i)\\b(end(\\s?if)?)\\b"
        endCaptures:
            "1":
                name: "keyword.control.if.end.monkey2"
        name: "control.if.monkey2"
        patterns: [
            {
                match: "(?i)\\b(then)\\b\\s*$"
                name: "keyword.control.then.monkey2"
            }
            {
                match: "(?i)\\b(else(\\s?if)?)\\b"
                name: "keyword.control.else-if.monkey2"
            }
            {
                match: "(?i)\\b(else)\\b"
                name: "keyword.control.else.monkey2"
            }
            {
                include: "$self"
            }
        ]
    }


    {
        begin: "(?i)\\b(for)\\b"
        beginCaptures:
            "1":
                name: "keyword.control.for.monkey2"
        end: "(?i)\\b(next)\\b"
        endCaptures:
            "1":
                name: "keyword.control.for.end.monkey2"
        name: "control.for.monkey2"
        patterns: [
            {
                match: "(?i)\\beachin\\b"
                name: "keyword.control.for.eachin.monkey2"
            }
            {
                match: "(?i)\\bto\\b"
                name: "keyword.control.for.to.monkey2"
            }
            {
                match: "(?i)\\buntil\\b"
                name: "keyword.control.for.until.monkey2"
            }
            {
                match: "(?i)\\bstep\\b"
                name: "keyword.control.for.step.monkey2"
            }
            {
                include: "$self"
            }
        ]
    }
    {
        begin: "(?i)\\b(repeat)\\b"
        beginCaptures:
            "1":
                name: "keyword.control.repeat.monkey2"
        end: "(?i)\\b(until|forever)\\b"
        endCaptures:
            "1":
                name: "keyword.control.repeat.end.monkey2"
        name: "control.repeat.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]
    }
    {
        begin: "(?i)\\b(select)\\b"
        beginCaptures:
            "1":
                name: "keyword.control.select.monkey2"
        end: "(?i)\\b(end(\\s?select)?)\\b"
        endCaptures:
            "1":
                name: "keyword.control.select.end.monkey2"
        name: "control.select.monkey2"
        patterns: [
            {
                captures:
                    "1":
                        name: "keyword.control.select.case.monkey2"
                match: "(?i)\\b(case)\\b"
                name: "control.select.case.monkey2"
            }
            {
                captures:
                    "1":
                        name: "keyword.control.select.default.monkey2"
                match: "(?i)\\b(default)\\b"
                name: "control.select.default.monkey2"
            }
            {
                include: "$self"
            }
        ]
    }
    {
        match: "(?i)\\b(mod|shl|shr|and|or|not)\\b"
        name: "keyword.operator.monkey2"
    }
    {
        match: ":?[\\^+\\-&~|=><]"
        name: "keyword.operator.monkey2"
    }
    {
        match: "(?i)\\b(private|public|virtual|override|final)\\b"
        name: "keyword.other.scope.monkey2"
    }
    {
        match: "(?i)\\b(strict)\\b"
        name: "keyword.other.strictness.monkey2"
    }
    {
        include: "#mnky_null"
    }
    {
        include: "#mnky_types"
    }
    {
        include: "#mnky_constants"
    }
    {
        include: "#mnky_string_quoted"
    }
    {
        match: "(?i)\\b(self)\\b"
        name: "variable.language.self.monkey2"
    }
    {
        match: "(?i)\\b(super)\\b"
        name: "variable.language.super.monkey2"
    }
    {
        include: "#mnky_constructor"
    }
    {
        include: "#mnky_array"
    }
    {
        include: "#mnky_typename"
    }
    {
        include: "#mnky_enum"
    }
]
repository:
    mnky_array:
        begin: "(\\[)"
        beginCaptures:
            "1":
                name: "keyword.operator.array.monkey2"
        end: "(\\])"
        endCaptures:
            "1":
                name: "keyword.operator.array.monkey2"
        name: "array.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]
    mnky_attributes:
        begin: "(\\{)"
        beginCaptures:
            "1":
                name: "storage.modifier.attributes.braces.monkey2"
        end: "(\\})"
        endCaptures:
            "1":
                name: "storage.modifier.attributes.braces.monkey2"
        name: "attributes.monkey2"
        patterns: [
            {
                begin: "\\b([a-zA-Z_]\\w*)\\s*(=)\\s*"
                beginCaptures:
                    "1":
                        name: "entity.other.attribute-name.monkey2"
                end: "(?=\\s|\\}|[a-zA-Z_])"
                name: "attribute.monkey2"
                patterns: [
                    {
                        include: "#mnky_string_quoted"
                    }
                    {
                        include: "#mnky_numbers"
                    }
                ]
            }
            {
                captures:
                    "1":
                        name: "entity.other.attribute-name.monkey2"
                match: "\\b([a-zA-Z_]\\w*)(?:\\s*((?!=)|(?=\\})))"
                name: "attribute.monkey2"
            }
        ]
    mnky_boolean:
        match: "(?i)\\b(true|false)\\b"
        name: "constant.language.boolean.monkey2"
    mnky_char:
        match: "\\b(CHAR_(TAB|BACKSPACE|ENTER|ESCAPE|PAGE(UP|DOWN)|END|HOME|LEFT|UP|RIGHT|DOWN|INSERT|DELETE))\\b"
        name: "constant.language.char.monkey2"
    mnky_commands:
        match: "(?i)\\b(A(bstract|Cos|Sin|Tan|Tan2|bs|ccel(X|Y|Z)|dd(First|Last)|pp|rray)|B(ackwards|ool)|C(ase|eil|hannelState|l(amp|s)|o(mpare|nst|nt(ains|inue)|py|s|unt)|lear)|D(e(faultFlags|vice(Height|Width))|iscard|raw(Circle|Ellipse|Image|ImageRect|Line|Oval|Point|Poly|Rect|Text))|E(achin|xt(ends|ern)|nd|ndsWith|rror|xit)|F(alse|i(eld|nd|ndLast|rst)|loat(Map|Set)|loor|or(ever)|rames|romChar)|G(et|et(Alpha|Blend|Char|Color|Font|Matrix|Scissor)|lobal|rabImage)|H(andle(X|Y)|eight)|I(m(age|p(lements|ort))|n(clude|line|t(erface|Map|Set))|sEmpty)|Jo(in|y(Down|Hit|X|Y|Z))|Key|Key(Down|Hit|s)|L(ast|ength|ist|o(g|ad(Image|Sound|State|String)|cal))|M(ap|ax|ethod|i(llisecs|n)|o(d(ule)|use(Down|Hit|X|Y))|in)|N(ative|e(w|xt)|o(de)|ull)|O(bject(Enumerator)|n(Create|Loading|Render|Resume|Suspend|Update))|P(laySound|o(pMatrix|w)|r(i(nt|vate)|operty)|u(blic|shMatrix))|R(e(move|move(Each|First|Last)|p(eat|lace)|turn)|nd|otate)|S(aveState|cale|e(ed|lf|t(Alpha|Blend|Channel(Pan|Rate|Volume)|Default|Color|Font|Handle|Image|List|Matrix|Scissor|UpdateRate))|gn|h(l|r)|in|ound|plit|qrt|t(artsWith|ep|opChannel|ri(ct|ng(Map|Set)))|uper)|T(ypeOf|an|hen|o(Lower|Upper|uch(Down|Hit|X|Y))|r(ans(form|late)|im|ue))|Until|V(alue|alue(ForKey|s)|oid)|Width)\\b"
        name: "keyword.other.commands.monkey2"
    mnky_comment_block:
        begin: "(?i)(?<=\\s|^|;)\\#rem\\b"
        end: "(?i)(?<=\\s|^|;)\\#end\\b"
        name: "comment.block.rem.monkey2"
        patterns: [
            {
                include: "#mnky_url_content"
            }
        ]
    mnky_comment_quote:
        begin: "'"
        end: "$"
        name: "comment.line.apostrophe.monkey2"
        patterns: [
            {
                include: "#mnky_url_content"
            }
        ]
    mnky_constant:
        captures:
            "1":
                name: "keyword.other.new.monkey2"
            "2":
                name: "constant.monkey2"
        match: "(?i)\\b(const)\\s+([a-zA-Z_]\\w*)\\b"
        name: "constant.monkey2"
    mnky_constants:
        name: "constants.monkey2"
        patterns: [
            {
                include: "#mnky_pi"
            }
            {
                include: "#mnky_boolean"
            }
            {
                include: "#mnky_numbers"
            }
            {
                include: "#mnky_mouse"
            }
            {
                include: "#mnky_char"
            }
            {
                include: "#mnky_env"
            }
        ]
    mnky_constructor:
        captures:
            "1":
                name: "keyword.other.new.monkey2"
            "2":
                name: "storage.type.class.monkey2"
        match: "(?i)\\b(new)\\s+([a-zA-Z_]\\w*)\\b"
        name: "call.constructor.monkey2"
    mnky_control_keywords:
        match: "(?i)\\b(throw|return|exit|continue)\\b"
        name: "keyword.control.monkey2"
    mnky_env:
        match: "\\b(TARGET|LANG)\\b"
        name: "constant.language.env.monkey2"
    mnky_field:
        captures:
            "1":
                name: "keyword.other.field.monkey2"
        match: "(?i)\\b(field)\\s+([a-zA-Z_]\\w*)+\\b"
        name: "variable.field.monkey2"
    mnky_function:
        begin: "(?i)\\b(function)\\s+([a-zA-Z_]\\w*)\\b"
        beginCaptures:
            "1":
                name: "storage.type.function.monkey2"
            "2":
                name: "entity.name.function.monkey2"
        end: "(?i)\\b(end(\\s?function)?)\\b"
        endCaptures:
            "1":
                name: "storage.type.function.monkey2"
        name: "function.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]
    mnky_lambda:
        begin: "(?i)\\b(lambda)\\b"
        beginCaptures:
            "1":
                name: "storage.type.function.lambda.monkey2"

        end: "(?i)\\b(end(\\s?lambda)?)\\b"
        endCaptures:
            "1":
                name: "storage.type.function.lambda.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]
    mnky_global_variable:
        captures:
            "1":
                name: "storage.modifier.global.monkey2"
        match: "(?i)\\b(global)\\s+([a-zA-Z_]\\w*)\\b"
        name: "variable.monkey2"
    mnky_local_variable:
        captures:
            "1":
                name: "keyword.other.local.monkey2"
        match: "(?i)\\b(local)\\s+([a-zA-Z_]\\w*)\\b"
        name: "variable.monkey2"
    mnky_method:
        begin: "(?i)\\b(method)\\s+([a-zA-Z_]\\w*)\\b"
        beginCaptures:
            "1":
                name: "storage.type.method.monkey2"
            "2":
                name: "entity.name.method.monkey2"
        end: "(?i)\\b(end(\\s?method)?)\\b"
        endCaptures:
            "1":
                name: "storage.type.method.monkey2"
        name: "method.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]
    mnky_property:
        begin: "(?i)\\b(property)\\s+([a-zA-Z_]\\w*)\\b"
        beginCaptures:
            "1":
                name: "storage.type.property.monkey2"
            "2":
                name: "entity.name.property.monkey2"
        end: "(?i)\\b(end(\\s?property)?)\\b"
        endCaptures:
            "1":
                name: "storage.type.property.monkey2"
            "2":
                name: "entity.name.property.monkey2"
        name:
            "property.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]
    mnky_setter:
        match:"(?i)\\b(setter)\(.*\)"
        captures:
            "1":
                name: "storage.type.property.setter.monkey2"
            "2":
                name: "entity.name.property.setter.monkey2"

        name:
            "property.setter.monkey2"

    mnky_mouse:
        match: "\\bMOUSE_(LEFT|RIGHT|MIDDLE)\\b"
        name: "constant.language.mouse.monkey2"
    mnky_null:
        match: "(?i)\\bnull\\b"
        name: "constant.language.null.monkey2"
    mnky_numbers:
        patterns: [
            {
                match: "(\\$[0-9a-fA-F]{1,16})"
                name: "constant.numeric.integer.hexadecimal.monkey2"
            }
            {
                match: '''
                         (?x) (?<! \\$ ) (
                                                     \\b ([0-9]+ \\. [0-9]+) |
                                                     (\\. [0-9]+)
                                                 )
                       '''
                name: "constant.numeric.float.monkey2"
            }
            {
                match: "(?x)\\b(([0-9]+))"
                name: "constant.numeric.integer.monkey2"
            }
        ]
    mnky_pi:
        match: "\\b(HALF|TWO)?PI\\b"
        name: "constant.language.monkey2"
    mnky_string_content:
        patterns: [
            {
                match: "\\~[^\"]"
                name: "constant.character.escape.monkey2"
            }
            {
                include: "#mnky_url_content"
            }
        ]
    mnky_string_quoted:
        begin: "\""
        beginCaptures:
            "0":
                name: "punctuation.definition.string.begin.monkey2"
        end: "\""
        endCaptures:
            "0":
                name: "punctuation.definition.string.end.monkey2"
        name: "string.quoted.double.monkey2"
        patterns: [
            {
                include: "#mnky_string_content"
            }
        ]
    mnky_typename:
        captures:
            "1":
                name: "storage.type.monkey2"
            "2":
                name: "storage.type.monkey2"
        match: "(?xi)(?: \\: \\s* ([a-zA-Z_]\\w*) | ([!#%]|@{1,2}|\\$[zw]?) )"
        name: "typename.monkey2"
    mnky_types:
        match: "(?i)\\b(ptr|array|bool|int|uint|short|ushort|byte|ubyte|long|ulong|float|double|string|variant|lambda)\\b"
        name: "storage.type.monkey2"
    mnky_url_content:
        match: "[a-zA-Z_]\\w*://[^ \"'()\\[\\]]*(?=$|\\b)"
        name: "url.monkey2"
    mnky_enum:
        begin: "(?xi)\\s*(Enum)\\s+([a-zA-Z1-9_]+)\\w*"
        beginCaptures:
            "1":
                name: "storage.type.monkey2"
            "2":
                name: "entity.name.type"
        name: "enum.monkey2"
        end: "(?i)\\b(end(\\s?enum)?)\\b"
        endCaptures:
            "1":
                name: "storage.type.enum.monkey2"
            "2":
                name: "storage.type.enum.monkey2"
        patterns: [
            {
                include: "$self"
            }
        ]

scopeName: "source.monkey2"
